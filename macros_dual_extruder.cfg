###################################################################
# Script Name	 : "macros_dual_extruder.cfg"                                                                                         
# Description	 : Adds print macros for Dual Extruders.
# 
# Args           :                                                                                           
# Author       	 : Alexander Koehler                                              
# Email          : software@akks.de 
# Date           : 15.01.2022                                    
###################################################################

# Receive Call for first extruder
[gcode_macro T0]
description: Receive Call for first extruder
#default_parameter_LOAD: 1  # Value of 1 will Unload other extruders and load this one
gcode:
    {% set LOAD = params.LOAD|default(1)|int %}  # Value of 1 will Unload other extruders and load this one
    {% if 'SKIP_PAUSE' not in params and printer["gcode_macro EXTRUDER_VARS"].pause_change_all == 1 %}
        FILAMENT_CHANGE TOOL=0
    {% else %}
        SET_FILAMENT_SENSOR SENSOR=fsensor0 ENABLE=1    # enable filament sensor
        #SET_FILAMENT_SENSOR SENSOR=fsensor1 ENABLE=0    # disable filament sensor
        {% if (LOAD|int) == 0 %}
            ACTIVATE_EXTRUDER EXTRUDER=extruder           # Else just select extruder
        {% else %}
            SWAP_EXTRUDER EXTR=extruder                   # Unload active and load this extruder
        {% endif %}
        M117 T0 Active
        UPDATE_DELAYED_GCODE ID=CLEAR_MSG DURATION=30
    {% endif %}

# Receive Call for second extruder
[gcode_macro T1]
description: Receive Call for second extruder
#default_parameter_LOAD: 1  # Value of 1 will Unload other extruders and load this one
gcode:
    {% set LOAD = params.LOAD|default(1)|int %}  # Value of 1 will Unload other extruders and load this one
    {% if 'SKIP_PAUSE' not in params and printer["gcode_macro EXTRUDER_VARS"].pause_change_all == 1 %}
        FILAMENT_CHANGE TOOL=1
    {% else %}
        #SET_FILAMENT_SENSOR SENSOR=fsensor1 ENABLE=1      # enable filament sensor
        SET_FILAMENT_SENSOR SENSOR=fsensor0 ENABLE=0      # disable filament sensor
        {% if (LOAD|int) == 0 %}
            ACTIVATE_EXTRUDER EXTRUDER=extruder1            # Else just select extruder
        {% else %}
            SWAP_EXTRUDER EXTR=extruder1                    # Unload active and load this extruder
        {% endif %}
        M117 T1 active
        UPDATE_DELAYED_GCODE ID=CLEAR_MSG DURATION=30
    {% endif %}

# Swap Extruders
[gcode_macro SWAP_EXTRUDER]
description: Swap Extruders mit "Extruder" to switch to
#default_parameter_EXTR: extruder                # Extruder to switch to
gcode:
    {% set EXTR = params.EXTR|default("extruder")|string %} # Extruder to switch to
    {% if (printer.toolhead.extruder) != (EXTR) %}
        SAVE_GCODE_STATE NAME=swap_state
        # if axes are homed and we don't want to swap middle of print
        {% if (printer.toolhead.homed_axes) and (printer["gcode_macro EXTRUDER_VARS"].swap_move == 1) %}
            G90
            G1 X230 Y2 F2000         # Move to down right corner
        {% elif (printer.toolhead.homed_axes) and (printer["gcode_macro EXTRUDER_VARS"].swap_move == 2) %}
            G90 X230 F2000            # just move right
        {% endif %}
        M117 Unloading
        Unload_{printer.toolhead.extruder}
        M117 Loading
        LOAD_{EXTR}
        RESTORE_GCODE_STATE NAME=swap_state
    {% endif %}

[gcode_macro UNLOAD_extruder]
description: Unload Extruder
gcode:
    {% if not printer["gcode_macro EXTRUDER_VARS"].extr0_unload == 1 %}
        RESPOND MSG="Unloading Extruder0"
        UNLOAD_EXTR
        EXTRUDER_CONFIG UNLOAD_EXT0=1
    {% else %}
        RESPOND MSG="Extruder0 already unloaded"
    {% endif %}

[gcode_macro UNLOAD_extruder1]
description: Unload Extruder1
gcode:
    {% if not printer["gcode_macro EXTRUDER_VARS"].extr1_unload == 1 %}
        RESPOND MSG="Unloading Extruder1"
        UNLOAD_EXTR
        EXTRUDER_CONFIG UNLOAD_EXT1=1
    {% else %}
        RESPOND MSG="Extruder1 already unloaded"
    {% endif %}

[gcode_macro LOAD_extruder]
description: Load Extruder
gcode:
    {% if printer["gcode_macro EXTRUDER_VARS"].extr0_unload == 1 %}
        {% if printer["gcode_macro EXTRUDER_VARS"].extr1_unload == 0 %}
            ACTIVATE_EXTRUDER EXTRUDER=extruder1
            UNLOAD_extruder1
        {% endif %}
        ACTIVATE_EXTRUDER EXTRUDER=extruder
        RESPOND MSG="Loading Extruder0"
        LOAD_EXTR
        EXTRUDER_CONFIG UNLOAD_EXT0=0
    {% else %}
        RESPOND MSG="Extruder0 already Loaded"
    {% endif %}

[gcode_macro LOAD_extruder1]
description: Load Extruder1
gcode:
    {% if printer["gcode_macro EXTRUDER_VARS"].extr1_unload == 1 %}
        {% if printer["gcode_macro EXTRUDER_VARS"].extr0_unload == 0 %}
            ACTIVATE_EXTRUDER EXTRUDER=extruder
            UNLOAD_extruder
        {% endif %}
        ACTIVATE_EXTRUDER EXTRUDER=extruder1
        RESPOND MSG="Loading Extruder1"
        LOAD_EXTR
        EXTRUDER_CONFIG UNLOAD_EXT1=0
    {% else %}
        RESPOND MSG="Extruder1 already Loaded"
    {% endif %}

# Load active Extruder
[gcode_macro LOAD_EXTR]
description: Load active Extruder with filament
gcode:
    SAVE_GCODE_STATE NAME=load_state
    M117 LOAD_EXTR UNLOAD_DISTANCE:{((printer["gcode_macro UNLOAD_DISTANCE"].dist)|int)}
    G92 E0
    M83
    # Using this variable makes sure load and unload move the same amount
    # last 50mm going in are slowed down (reason they are subtracted)
    # Change unload position amount in variables_user.cfg
    {% for i in range(((((printer["gcode_macro UNLOAD_DISTANCE"].dist)|int)-50)/100)|int) %}
        G1 E100 F5000
        RESPOND MSG={(((((printer["gcode_macro UNLOAD_DISTANCE"].dist)|int)-50)/100)|int)}
    {% endfor %}
    G1 E{(((printer["gcode_macro UNLOAD_DISTANCE"].dist)|int)-50)%100} F5000
    RESPOND MSG={(((printer["gcode_macro UNLOAD_DISTANCE"].dist)|int)-50)%100}
    G1 E40 F1000
    G1 E10 F300
    RESPOND MSG="50"
    M82
    RESTORE_GCODE_STATE NAME=load_state

# Call to pull filament to unload position
[gcode_macro UNLOAD_EXTR]
description: Call to pull filament to unload position
#default_parameter_RAM: 10
gcode:
    {% set RAM = params.RAM|default(10)|float %}
    SAVE_GCODE_STATE NAME=unload_state
    M117 UNLOAD_EXTR UNLOAD_DISTANCE:{((printer["gcode_macro UNLOAD_DISTANCE"].dist)|int)}
    G92 E0
    G91                             # relative positioning
    M83
    G1 E{RAM} F300                     # Ramming to help shape end
    # See LOAD_EXTR for details of this segment
    {% for i in range((((printer["gcode_macro UNLOAD_DISTANCE"].dist)|int)/100)|int) %}
        G1 E-100 F5000
    {% endfor %}
    {% if (((printer["gcode_macro UNLOAD_DISTANCE"].dist)|int)%100) > 0 %}
        G1 E{(((printer["gcode_macro UNLOAD_DISTANCE"].dist)|int)%100)*(-1)} F5000
    {% endif %}
    G1 E-{RAM} F5000   #to account for the ramming filament
    M82
    G90                             # absolute positioning
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro PURGE_EXTRUDER]
description: PURGE EXTRUDER
gcode:
    SAVE_GCODE_STATE NAME=purge_ext
    M117 PURGE_EXTRUDER
    M83
    G1 E10 F200
    RESTORE_GCODE_STATE NAME=purge_ext

# Variables responsible for maintaining extruder states
[gcode_macro EXTRUDER_VARS]
description: Variables responsible for maintaining extruder states
variable_num_extruders: 1
variable_ext1_bkup: 0
variable_swap_move: 0
variable_extr0_unload: 1
variable_extr1_unload: 1
variable_pause_change_all: 0
variable_extr0_sensor: 0
gcode:
    RESPOND TYPE=echo MSG="NUM Extruders = {num_extruders}"
    RESPOND TYPE=echo MSG="EXT1 as Backup = {ext1_bkup}"
    RESPOND TYPE=echo MSG="Swap move set to = {swap_move}"
    RESPOND TYPE=echo MSG="Extr0 unload State = {extr0_unload}"
    RESPOND TYPE=echo MSG="Extr1 unload State = {extr1_unload}"
    RESPOND TYPE=echo MSG="Pause on Tool change = {pause_change_all}"
    RESPOND TYPE=echo MSG="Extr0 Fila-Sensor = {extr0_sensor}"

# Nozzle length 13mm, White PTFE tube length is 27mm, Blue PTFE is 38mm long to split
[gcode_macro UNLOAD_DISTANCE]
description: Unload Distance - Nozzle length 13mm, White PTFE tube length is 27mm, Blue PTFE is 38mm long to split
variable_dist: 80
gcode:
    {% set ULDIST = params.ULDIST|default(80)|float %}
    #SET_GCODE_VARIABLE MACRO=EXTRUDER_VARS VARIABLE=unload_dist VALUE={ULDIST}
    SET_GCODE_VARIABLE MACRO=UNLOAD_DISTANCE VARIABLE=dist VALUE={ULDIST}
    SAVE_VARIABLE VARIABLE=unload_distance VALUE={ULDIST}
    RESPOND MSG="UNLOAD_DISTANCE: {ULDIST}"
    RESPOND MSG="UNLOAD_DISTANCE.dist: {(printer["gcode_macro UNLOAD_DISTANCE"].dist)}"
    #RESPOND MSG="EXTRUDER_VARS.unload_dist: {((printer["gcode_macro EXTRUDER_VARS"].unload_dist)|float)}"


# NOT REQUIRED Get extruder values from slicer, set in custom G-code. Also used to set unload states
[gcode_macro EXTRUDER_CONFIG]
description: NOT REQUIRED Get extruder values from slicer, set in custom G-code. Also used to set unload states
gcode:
    {% set EXTRUDERS = params.EXTRUDERS|default(2)|int %}               # Slicer declares num extruders
    {% set RUNOUT_BACKUP = params.RUNOUT_BACKUP|default(0)|int %}       # Slicer declares if T1 is runout backup for T0
    {% set SWAP_MOVE = params.SWAP_MOVE|default(1)|int %}               # Slicer declares if swap happens within print
    {% set PAUSE_CHANGE_ALL = params.PAUSE_CHANGE_ALL|default(0)|int %} # Slicer declares pausing for filament changes
    {% set SENSOR_EXT0 = params.SENSOR_EXT0|default(0)|int %}           # Extruder Fila Sensor (Enable) 0=false, 1=true
    {% set UNLOAD_DISTANCE = params.UNLOAD_DISTANCE|default(0)|int %}
    {% if 'EXTRUDERS' in params %}
        RESPOND TYPE=echo MSG="NUM Extruders = {params.EXTRUDERS|int}"
        SET_GCODE_VARIABLE MACRO=EXTRUDER_VARS VARIABLE=num_extruders VALUE={params.EXTRUDERS|int}
        SAVE_VARIABLE VARIABLE=num_extruders VALUE={params.EXTRUDERS|int}
    {% endif %}
    {% if 'RUNOUT_BACKUP' in params %}
        RESPOND TYPE=echo MSG="EXT1 as Backup = {params.RUNOUT_BACKUP|int}"
        SET_GCODE_VARIABLE MACRO=EXTRUDER_VARS VARIABLE=ext1_bkup VALUE={params.RUNOUT_BACKUP|int}
        SAVE_VARIABLE VARIABLE=ext1_bkup VALUE={params.RUNOUT_BACKUP|int}
    {% endif %}
    {% if 'SWAP_MOVE' in params %}
        RESPOND TYPE=echo MSG="Swap move set to = {params.SWAP_MOVE|int}"
        SET_GCODE_VARIABLE MACRO=EXTRUDER_VARS VARIABLE=swap_move VALUE={params.SWAP_MOVE|int}
        SAVE_VARIABLE VARIABLE=swap_move VALUE={params.SWAP_MOVE|int}
    {% endif %}
    {% if 'UNLOAD_EXT0' in params %}
        M117 E0 unload = {params.UNLOAD_EXT0|int}
        SET_GCODE_VARIABLE MACRO=EXTRUDER_VARS VARIABLE=extr0_unload VALUE={params.UNLOAD_EXT0|int}
        SAVE_VARIABLE VARIABLE=extr0_unload VALUE={params.UNLOAD_EXT0|int}
        UPDATE_DELAYED_GCODE ID=CLEAR_MSG DURATION=10
    {% endif %}
    {% if 'UNLOAD_EXT1' in params %}
        M117 E1 unload = {params.UNLOAD_EXT1|int}
        SET_GCODE_VARIABLE MACRO=EXTRUDER_VARS VARIABLE=extr1_unload VALUE={params.UNLOAD_EXT1|int}
        SAVE_VARIABLE VARIABLE=extr1_unload VALUE={params.UNLOAD_EXT1|int}
        UPDATE_DELAYED_GCODE ID=CLEAR_MSG DURATION=10
    {% endif %}
    {% if 'PAUSE_CHANGE_ALL' in params %}
        M117 Pause Tool Change = {params.PAUSE_CHANGE_ALL|int}
        SET_GCODE_VARIABLE MACRO=EXTRUDER_VARS VARIABLE=pause_change_all VALUE={params.PAUSE_CHANGE_ALL|int}
        SAVE_VARIABLE VARIABLE=pause_change_all VALUE={params.PAUSE_CHANGE_ALL|int}
        UPDATE_DELAYED_GCODE ID=CLEAR_MSG DURATION=10
    {% endif %}
    {% if 'UNLOAD_DISTANCE' in params %}
        RESPOND TYPE=echo MSG="UNLOAD_DISTANCE move set to = {params.UNLOAD_DISTANCE|float}"
        SET_GCODE_VARIABLE MACRO=UNLOAD_DISTANCE VARIABLE=dist VALUE={params.UNLOAD_DISTANCE|float}
        SAVE_VARIABLE VARIABLE=unload_distance VALUE={params.UNLOAD_DISTANCE|int}
    {% endif %}
    {% if 'SENSOR_EXT0' in params %}
        RESPOND TYPE=echo MSG="extr0_sensor Enable set to = {params.SENSOR_EXT0|int}"
        SET_GCODE_VARIABLE MACRO=EXTRUDER_VARS VARIABLE=extr0_sensor VALUE={params.SENSOR_EXT0|int}
        SAVE_VARIABLE VARIABLE=extr0_sensor VALUE={params.SENSOR_EXT0|int}
    {% endif %}
    #SAVE_CONFIG

# Call at beginning of print to setup extruders
[gcode_macro PREP_EXTRUDERS]
description: Call at beginning of print to setup extruders
gcode:
    M117 Prep Extruder(s)
    M117 Anzahl Extruder: {((printer["gcode_macro EXTRUDER_VARS"].num_extruders)|int)}
    SAVE_GCODE_STATE NAME=prep_extruders                # restore any states
    {% if (printer.toolhead.homed_axes) %}
        G90
        G1 X1 Y1 F2000 # G1 X235 Y-5 F2000
    {% endif %}
    {% if printer["gcode_macro EXTRUDER_VARS"].num_extruders > 1 %} # If second extruder present
        M117 Multi Extruder erkannt!
        #SET_FILAMENT_SENSOR SENSOR=fsensor1 ENABLE=1  # enable filament sensor
        T1 LOAD=0 SKIP_PAUSE=1                                    # activate extruder1 without moving extruder0
        M117 Extruder1 active
        LOAD_EXTR
        PURGE_EXTRUDER                       # Purge a little, clean out old color
        UNLOAD_EXTR
        EXTRUDER_CONFIG UNLOAD_EXT1=1
    {% endif %}
    SET_FILAMENT_SENSOR SENSOR=fsensor0 ENABLE=1                        # enable filament sensor
    T0 LOAD=0 SKIP_PAUSE=1                                              # activate extruder without event triggers
    M117 extruder active
    LOAD_EXTR
    PURGE_EXTRUDER
    EXTRUDER_CONFIG UNLOAD_EXT0=0
    RESTORE_GCODE_STATE NAME=prep_extruders

# DEFAULT / Basic Parameters
[gcode_macro LOAD_DEFAULT]
description: Set DEFAULT / Basic Parameters
gcode:
    {% set EXTRUDERS = params.EXTRUDERS|default(2)|int %}               # Slicer declares num extruders
    {% set RUNOUT_BACKUP = params.RUNOUT_BACKUP|default(0)|int %}       # Slicer declares if T1 is runout backup for T0
    {% set SWAP_MOVE = params.SWAP_MOVE|default(1)|int %}               # Slicer declares if swap happens within print
    {% set PAUSE_CHANGE_ALL = params.PAUSE_CHANGE_ALL|default(0)|int %} # Slicer declares pausing for filament changes
    {% set UNLOAD_DISTANCE = params.UNLOAD_DISTANCE|default(80)|float %}# Unload Distance 
    {% set extr0_unload = params.extr0_unload|default(0)|int %}         # Status Extruder 0=geladen, 1=ungeladen
    {% set extr1_unload = params.extr1_unload|default(1)|int %}         # Status Extruder1 0=geladen, 1=ungeladen
    {% set extr0_sensor = params.extr0_sensor|default(1)|int %}         # Extruder Fila Sensor (Enable) 0=false, 1=true
    M117 LOAD_DEFAULT
    SET_FILAMENT_SENSOR SENSOR=fsensor0 ENABLE={extr0_sensor}      # disable filament sensor
    #SET_FILAMENT_SENSOR SENSOR=fsensor1 ENABLE=0      # disable filament sensor
    #UNLOAD_DISTANCE ULDIST={UNLOAD_DISTANCE}
    EXTRUDER_CONFIG EXTRUDERS={EXTRUDERS} RUNOUT_BACKUP={RUNOUT_BACKUP} SWAP_MOVE={SWAP_MOVE} PAUSE_CHANGE_ALL={PAUSE_CHANGE_ALL} UNLOAD_EXT0={extr0_unload} UNLOAD_EXT1={extr1_unload} UNLOAD_DISTANCE={UNLOAD_DISTANCE} SENSOR_EXT0={extr0_sensor}
    STATUS_EXTRUDER

[gcode_macro STATUS_EXTRUDER]
description: Status EXTRUDER_VARS printer["gcode_macro EXTRUDER_VARS"] Variablen
gcode:
    RESPOND TYPE=echo MSG="NUM Extruders = {printer["gcode_macro EXTRUDER_VARS"].num_extruders}"
    RESPOND TYPE=echo MSG="EXT1 as Backup = {printer["gcode_macro EXTRUDER_VARS"].ext1_bkup}"
    RESPOND TYPE=echo MSG="Swap move set to = {printer["gcode_macro EXTRUDER_VARS"].swap_move}"
    RESPOND TYPE=echo MSG="Extr0 unload State = {printer["gcode_macro EXTRUDER_VARS"].extr0_unload}"
    RESPOND TYPE=echo MSG="Extr1 unload State = {printer["gcode_macro EXTRUDER_VARS"].extr1_unload}"
    RESPOND TYPE=echo MSG="Pause on Tool change = {printer["gcode_macro EXTRUDER_VARS"].pause_change_all}"
    RESPOND TYPE=echo MSG="Extr0 Sensor = {printer["gcode_macro EXTRUDER_VARS"].extr0_sensor}"
    #RESPOND TYPE=echo MSG="Unload Distance = {printer["gcode_macro EXTRUDER_VARS"].unload_dist}"
    RESPOND TYPE=echo MSG="UNLOAD_DISTANCE.dist = {printer["gcode_macro UNLOAD_DISTANCE"].dist}"

[gcode_macro STATUS_EV]
description: Status EXTRUDER_VARS printer["gcode_macro EXTRUDER_VARS"] Variablen
gcode:
    {% set ev = printer["gcode_macro EXTRUDER_VARS"] %}
    RESPOND TYPE=echo MSG="NUM Extruders = {ev.num_extruders}"
    RESPOND TYPE=echo MSG="EXT1 as Backup = {ev.ext1_bkup}"
    RESPOND TYPE=echo MSG="Swap move set to = {ev.swap_move}"
    RESPOND TYPE=echo MSG="Extr0 unload State = {ev.extr0_unload}"
    RESPOND TYPE=echo MSG="Extr1 unload State = {ev.extr1_unload}"
    RESPOND TYPE=echo MSG="Pause on Tool change = {ev.pause_change_all}"
    RESPOND TYPE=echo MSG="Extr0 Sensor = {ev.extr0_sensor}"
    RESPOND TYPE=echo MSG="UNLOAD_DISTANCE.dist = {printer["gcode_macro UNLOAD_DISTANCE"].dist}"

[gcode_macro STATUS_SAVE_VAR]
description: Status Save Variables
gcode:
    {% set svv = printer.save_variables.variables %}
    RESPOND TYPE=echo MSG="NUM Extruders = {svv.num_extruders}"
    RESPOND TYPE=echo MSG="EXT1 as Backup = {svv.ext1_bkup}"
    RESPOND TYPE=echo MSG="Swap move set to = {svv.swap_move}"
    RESPOND TYPE=echo MSG="Extr0 unload State = {svv.extr0_unload}"
    RESPOND TYPE=echo MSG="Extr1 unload State = {svv.extr1_unload}"
    RESPOND TYPE=echo MSG="Pause on Tool change = {svv.pause_change_all}"
    RESPOND TYPE=echo MSG="Extr0 Sensor = {svv.extr0_sensor}"
    RESPOND TYPE=echo MSG="Unload Dinstance = {svv.unload_distance}"    

